<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Cacm.Isils">



    <!--#region  Toggle Button-->
    
    <!-- icon with text button -->
    <Style x:Key="IconWithTextButton" TargetType="{x:Type ToggleButton}">


        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}" />

        <Setter Property="Background" Value="{StaticResource BackgroundDarkBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="local:ToggleOnCheckedBackgroundAttachedProperties.Value" Value="{StaticResource CacmCyanBrush}"/>
        <Setter Property="local:ToggleOnCheckedTextColorAttachedProperties.Value" Value="{StaticResource ForegroundLightBrush}"/>
        <Setter Property="local:ToggleOnCheckedContentAttachedProperties.Value" Value="{Binding Content, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="local:ToggleOnCheckedIconAttachedProperties.Value" Value="{Binding Uid, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            
                            SnapsToDevicePixels="True" Background="{TemplateBinding Background}">


                        <Grid>
                            <StackPanel  
                                 
                              Orientation="Horizontal"  Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True"  VerticalAlignment="Center"  HorizontalAlignment="Center">

                                <TextBlock
                                    x:Name="IconText"
                                    Foreground="{TemplateBinding Foreground}"
                                    Text="{TemplateBinding Uid}" 
                                    Focusable="False" 
                                    FontFamily="{DynamicResource IcoMoon}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    FontSize="{StaticResource FontSizeMedium}" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   />

                                <TextBlock
                                    x:Name="Text"
                                    Foreground="{TemplateBinding Foreground}"
                                    FontSize="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FontSize, Converter={local:FontSizeConveters}}" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"         
                                    Text="{TemplateBinding Content}" TextWrapping="Wrap" Margin="5,3,0,0" 
                                 />

                            </StackPanel>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border"
                                    Value="{StaticResource BackgroundMediumDarkBrush}"
                                    />


                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <!--change the text of the icon text on checked-->
                            <Setter TargetName="IconText" Property="Text" 
                            Value="{Binding Path=(local:ToggleOnCheckedIconAttachedProperties.Value),
                            RelativeSource={RelativeSource TemplatedParent}}"
                            />
                            <!--change the textq of the text on checked-->
                            <Setter TargetName="Text" Property="Text" 
                            Value="{Binding Path=(local:ToggleOnCheckedContentAttachedProperties.Value),
                            RelativeSource={RelativeSource TemplatedParent}}"
                            />

                            <!--change the color of the icon text on checked-->
                            <Setter TargetName="IconText" Property="Foreground" 
                            Value="{Binding Path=(local:ToggleOnCheckedTextColorAttachedProperties.Value),
                            RelativeSource={RelativeSource TemplatedParent}}"
                            />
                            <!--change the color of the text on checked-->
                            <Setter TargetName="Text" Property="Foreground" 
                            Value="{Binding Path=(local:ToggleOnCheckedTextColorAttachedProperties.Value),
                            RelativeSource={RelativeSource TemplatedParent}}"
                            />
                            <!--change the color of the background on checked-->
                            <Setter TargetName="border" Property="Background" 
                            Value="{Binding Path=(local:ToggleOnCheckedBackgroundAttachedProperties.Value),
                            RelativeSource={RelativeSource TemplatedParent}}"
                            />

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>
   
    <!-- only icon toggle button -->
    <Style x:Key="IconGrowButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{StaticResource BackgroundVeryDarkBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
        <Setter Property="FontFamily" Value="{StaticResource IcoMoon}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="local:ToggleOnCheckedTextColorAttachedProperties.Value" Value="{StaticResource CacmCyanBrush}"/>
        <Setter Property="local:ToggleOnCheckedIconAttachedProperties.Value" Value="{Binding Content, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">

                        <!-- Add a render scale transform -->

                        <Grid>
                            <Viewbox>
                                <TextBlock Text="{TemplateBinding Content}"
                                           x:Name="iconText"
                                       Focusable="False" 
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Margin="{TemplateBinding Padding}" 
                                           
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <TextBlock.RenderTransform>
                                        <ScaleTransform />
                                    </TextBlock.RenderTransform>
                                    <TextBlock.RenderTransformOrigin>
                                        <Point X="0.5" Y="0.5" />
                                    </TextBlock.RenderTransformOrigin>

                                </TextBlock>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <Trigger Property="IsChecked" Value="True">
                            <!--change the text of the icon text on checked-->
                            <Setter TargetName="iconText" Property="Text" 
                            Value="{Binding Path=(local:ToggleOnCheckedIconAttachedProperties.Value),
                            RelativeSource={RelativeSource TemplatedParent}}"
                            />

                            <Setter Property="Foreground" TargetName="iconText"
                                           Value="{Binding Path=(local:ToggleOnCheckedTextColorAttachedProperties.Value),
                            RelativeSource={RelativeSource TemplatedParent}}"
                                    />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- only icon toggle button chnage icon and text color -->
    <Style x:Key="IconToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource BaseStyle}">
        <Setter Property="Background" Value="{StaticResource BackgroundVeryDarkBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
        <Setter Property="FontFamily" Value="{StaticResource IcoMoon}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="local:ToggleOnCheckedBackgroundAttachedProperties.Value" Value="{StaticResource CacmCyanBrush}"/>
        <Setter Property="local:ToggleOnCheckedTextColorAttachedProperties.Value" Value="{StaticResource ForegroundLightBrush}"/>
        <Setter Property="local:ToggleOnCheckedContentAttachedProperties.Value" Value="{Binding Content, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="local:ToggleOnCheckedIconAttachedProperties.Value" Value="{Binding Uid, RelativeSource={RelativeSource Self}}"/>
        
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">

                        <!-- Add a render scale transform -->

                        <Grid>
                            <Viewbox>
                                <TextBlock Text="{TemplateBinding Content}"
                                           x:Name="iconText"
                                       Focusable="False" 
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Margin="{TemplateBinding Padding}" 
                                           
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <TextBlock.RenderTransform>
                                        <ScaleTransform />
                                    </TextBlock.RenderTransform>
                                    <TextBlock.RenderTransformOrigin>
                                        <Point X="0.5" Y="0.5" />
                                    </TextBlock.RenderTransformOrigin>

                                </TextBlock>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <Trigger Property="IsChecked" Value="True">
                            <!--change the text of the icon text on checked-->
                            <Setter TargetName="iconText" Property="Text" 
                            Value="{Binding Path=(local:ToggleOnCheckedIconAttachedProperties.Value),
                            RelativeSource={RelativeSource TemplatedParent}}"
                            />

                            <Setter Property="Foreground" TargetName="iconText"
                                           Value="{Binding Path=(local:ToggleOnCheckedTextColorAttachedProperties.Value),
                            RelativeSource={RelativeSource TemplatedParent}}"
                                    />



                            
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--#endregion-->
    
    <!--#region  Simple Button-->

    <!-- just a text Text button -->
    <Style x:Key="TextButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

        <Setter Property="Background" Value="{StaticResource BackgroundVeryDarkBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeRegular}" />
        <Setter Property="FontFamily" Value="{StaticResource Melbourne}" />
        <Setter Property="Padding" Value="50 10" />


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                          
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <TextBlock Text="{TemplateBinding Content}" 
                                   Focusable="False" 
                                   FontFamily="{TemplateBinding FontFamily}"
                                   FontSize="{TemplateBinding FontSize}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                   Margin="{TemplateBinding Padding}" 
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource CacmCyanBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- icon tranparent button mouse hover foreground change -->
    <Style x:Key="IconOnlyButton" TargetType="{x:Type Button}">


        <Setter Property="FontSize" Value="{StaticResource FontSizeVerySmaller}" />

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundDarkBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"  
                            SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                        <Grid>


                            <TextBlock
                                    x:Name="IconText"
                                    Foreground="{TemplateBinding Foreground}"
                                    Text="{TemplateBinding Content}" 
                                    Focusable="False" 
                                    FontFamily="{DynamicResource IcoMoon}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                   />

                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" TargetName="IconText"
                                    Value="{StaticResource ForegroundMainBrush}"
                                    />
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- only icon glow simple button mouse hover icon size bigger  -->    
    <Style x:Key="IconGlowSimpleButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

        <Setter Property="Background" Value="{StaticResource BackgroundVeryDarkBrush}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundLightBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeLarge}" />
        <Setter Property="FontFamily" Value="{StaticResource IcoMoon}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="0" />
  
        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Viewbox>
                                <TextBlock Text="{TemplateBinding Content}"
                                           x:Name="iconText"
                                       Focusable="False" 
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Margin="{TemplateBinding Padding}" 
                                           
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <TextBlock.RenderTransform>
                                        <ScaleTransform />
                                    </TextBlock.RenderTransform>
                                    <TextBlock.RenderTransformOrigin>
                                        <Point X="0.5" Y="0.5" />
                                    </TextBlock.RenderTransformOrigin>

                                </TextBlock>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1.2" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)" />
                                    <DoubleAnimation To="1" Duration="0:0:0.15" Storyboard.TargetName="iconText" Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

               
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- only icon button tranparent mouse hover background change -->
    <Style x:Key="IconButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BaseStyle}">

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundVeryDarkBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="{StaticResource FontSizeVerySmaller}" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="FontFamily" Value="{StaticResource FontAwesome}" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Margin" Value="0" />

        <Setter Property="Width" Value="{Binding ActualHeight, RelativeSource={RelativeSource Self}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <Grid>
                            <Viewbox>
                                <TextBlock x:Name="text" Text="{TemplateBinding Content}" 
                                       Focusable="False" 
                                       FontFamily="{TemplateBinding FontFamily}"
                                       FontSize="{TemplateBinding FontSize}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                       Margin="{TemplateBinding Padding}" 
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Viewbox>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="{StaticResource BackgroundLight}" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation To="Transparent" Duration="0:0:0.3" Storyboard.TargetName="border" Storyboard.TargetProperty="Background.Color" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" TargetName="text" Value="{StaticResource  ForegroundDarkBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->
    
</ResourceDictionary>